h1. About

Flay is a structural similarity checker built specifically for Ruby by Ryan Davis.  It uses ruby_parser under the covers to create Sexp nodes for Ruby code before doing the duplication check.  That means it can be clever about comparing different forms of syntax.  For example, Flay understands that do...end is the same as {...}.  It also understands the detailed structure of Ruby code.

h1. Command

flay lib app

h1. Interface

The command is run by calling 'flay' and passing a list of files to process.  Output from the command goes to standard output in the following form:

<error number>) <Similar|IDENTICAL> code found in <symbol> (mass<multiplier if identical> = <size>)
  <relative filename>:<line number>
  <relative filename>:<line number>
  ...

For example:

2) IDENTICAL code found in :defn (mass*3 = 252)
  app/models/icon.rb:10
  app/models/upload.rb:8
  app/models/website_image.rb:15

After contacting Ryan Davis, he also told me that I could run 'flay -v' to get more verbose output.  It uses ruby2ruby to show you the actual code and the differences between them that were found, in addition to the locations which is normally included.

For example:

9) Similar code found in :masgn (mass = 72)
  A: app/helpers/application_helper.rb:70
  B: app/helpers/application_helper.rb:71
  C: app/helpers/application_helper.rb:72

A: year, month, day = if date.nil? then
B: max_year, max_month, max_day = if max_date.nil? then
C: min_year, min_month, min_day = if min_date.nil? then
     ["null", "null", "null"]
   else
A:   [date.year, date.month, date.day]
B:   [max_date.year, max_date.month, max_date.day]
C:   [min_date.year, min_date.month, min_date.day]
   end


h1. Documentation

The website for Flay is at http://ruby.sadi.st/Flay.html.  It describes a sample command, but no further syntax.  The command line help for Flay look like this:

$ flay -h

flay [options] files_or_dirs

Specific options:

    -h, --help                       Display this help.
    -f, --fuzzy                      Attempt to do fuzzy similarities. (SLOW)
    -m, --mass MASS                  Sets mass threshold
    -v, --verbose                    Verbose. Display N-Way diff for ruby.

Known extensions: rb

h1. Code

The code for flay is all in a single file with about 300 lines of code.  It might be a little clearer if the multiple classes were split out to separate files, but that's mostly a personal style issue.  It was a surprisingly small code base for how powerful it is.  A couple of the internal methods that do the grunt work are reasonably complex (process_fuzzy_similarities and n_way_diff for example).  It does quite cleanly separate the processing of the data from the reporting of the data though, which would make it easy to add on a different interface without needing to parse the output.

h1. General Comments

Flay is a really simple tool with useful output.  It is very easy to run, and the output was easy to decipher even though no documentation exists to help guide you through it.  Some simple command line help when it is run with no parameters would be a great improvement.  After some discussion with Ryan about a rake task, he added one very quickly to the gem.  It gives you support for failing a build if the flay total exceeds some threshold (200 by default), and has reasonable defaults for directories to look in which are also suitable for Rails applications.

h1. Comparison to Simian

Simian is significantly faster at running when compared to flay, but doesn't understand the Ruby syntax anywhere near as well as flay does.  If you have chunks of code of 3 or 4 lines that have been copy-pasted and had a variable name changed, Simian will find them quite well.  Flay is much better at understanding smaller chunks of code that have been written independently but happen to be similar.  It has a much better understanding of the language under the covers because of the use of ruby_parser as well.  For example, Flay will understand that blocks using "{..}" as delimeters are the same as blocks using "do..end" as delimeters.

Simian is useful if:
  - you want a super fast build (ie. milliseconds vs seconds is important to you.  See timing example below)
  - you want to check for duplication across non-Ruby text files as well.
  - you want to check for duplication in a *really* big code base (ie. you think all of Rails ain't so much code)

Flay is useful if:
  - you care about the fine grained detail in duplication checking in your code.

My observation is that most people in Ruby community don't meet any of the criteria under Simian, and they should start with Flay.  One last option is actually to run both.  They do seem to get slightly different results, and the combined overhead of them is still low.

h2. Timing example:

$ time java -jar simian-2.2.22.jar -includes=/Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/**/*.rb
...
real	0m0.773s
user	0m0.647s
sys	0m0.088s


$ time find /Library/Ruby/Gems/1.8/gems/activerecord-2.1.1/ -name "*.rb" | xargs flay
...
real	0m14.474s
user	0m13.454s
sys	0m0.804s

h1. The 'Eat Your Own Dog Food' check

$ find /Library/Ruby/Gems/1.8/gems/flay-1.1.0 -name "*.rb" | xargs flay

Processing /Library/Ruby/Gems/1.8/gems/flay-1.1.0/lib/flay.rb
Processing /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb

1) IDENTICAL code found in :call (mass*2 = 108)
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:24
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:60

2) IDENTICAL code found in :lasgn (mass*2 = 72)
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:105
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:136

3) Similar code found in :call (mass = 34)
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:213
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:214

4) Similar code found in :call (mass = 34)
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:216
  /Library/Ruby/Gems/1.8/gems/flay-1.1.0/test/test_flay.rb:217


Some output comes up from test code, but none in the production code from the tool itself.  Pretty good!  Ryan tells me that a good number of them are dupes on purpose, since Flay actually needs to test that :)
